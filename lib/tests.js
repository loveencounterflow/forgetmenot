// Generated by CoffeeScript 1.10.0
(function() {
  var CND, FMN, FS, PATH, badge, debug, echo, help, include, info, log, rpr, step, templates_home, test, test_data_home, urge, warn, whisper,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'FORGETMENOT/TESTS';

  log = CND.get_logger('plain', badge);

  debug = CND.get_logger('debug', badge);

  info = CND.get_logger('info', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  whisper = CND.get_logger('whisper', badge);

  echo = CND.echo.bind(CND);

  test = require('guy-test');

  PATH = require('path');

  FS = require('fs');

  step = require('coffeenode-suspend').step;

  test_data_home = PATH.resolve(__dirname, '../test-data');

  templates_home = PATH.resolve(test_data_home, 'templates');

  FMN = require('..');

  this._prune = function() {
    var name, value;
    for (name in this) {
      value = this[name];
      if (name.startsWith('_')) {
        continue;
      }
      if (indexOf.call(include, name) < 0) {
        delete this[name];
      }
    }
    return null;
  };

  this._procure_test_files = function() {
    var byte_count, file_count, filename, i, len, ref, source_path, target_path;
    file_count = 0;
    ref = FS.readdirSync(templates_home);
    for (i = 0, len = ref.length; i < len; i++) {
      filename = ref[i];
      file_count += +1;
      source_path = PATH.resolve(templates_home, filename);
      target_path = PATH.resolve(test_data_home, filename);
      byte_count = this._copy_file_sync(source_path, target_path);
    }
    return whisper("copied " + file_count + " files");
  };

  this._copy_file_sync = function(source_path, target_path) {
    var source;
    FS.writeFileSync(target_path, source = FS.readFileSync(source_path));
    return source.length;
  };

  this._looks_like_digest = function(x) {
    return (CND.isa_text(x)) && /^[0-9a-f]{12}$/.test(x);
  };

  this._main = function() {
    return test(this, {
      'timeout': 2500
    });
  };

  this["create memo object (1)"] = function(T, done) {
    return step((function(_this) {
      return function*(resume) {
        var i, len, matcher, probe, probes_and_matchers, ref, result;
        probes_and_matchers = [
          [
            {}, {
              "~isa": "FORGETMENOT/memo",
              "globs": [],
              "ref": ".",
              "name": ".forgetmenot-memo.json",
              "autosave": false,
              "store": {}
            }
          ], [
            {
              "ref": "test-data"
            }, {
              "~isa": "FORGETMENOT/memo",
              "globs": [],
              "ref": "test-data",
              "name": ".forgetmenot-memo.json",
              "autosave": false,
              "store": {}
            }
          ], [
            {
              "name": "some-name.json"
            }, {
              "~isa": "FORGETMENOT/memo",
              "globs": [],
              "ref": ".",
              "name": "some-name.json",
              "autosave": false,
              "store": {}
            }
          ]
        ];
        for (i = 0, len = probes_and_matchers.length; i < len; i++) {
          ref = probes_and_matchers[i], probe = ref[0], matcher = ref[1];
          result = (yield FMN.create_memo(probe, resume));
          T.eq(result, matcher);
        }
        return done();
      };
    })(this));
  };

  this["create memo object (2)"] = function(T, done) {
    step((function(_this) {
      return function*(resume) {
        var result, settings, store;
        settings = {
          ref: 'test-data',
          name: 'create memo object (2).json',
          globs: 'test-1/*.txt'
        };
        result = (yield FMN.create_memo(settings, resume));
        T.eq(result['globs'], ['test-1/*.txt'], T.eq(result['ref'], 'test-data', T.eq(result['name'], 'create memo object (2).json', T.eq(result['autosave'], true, (store = result.store, result)))));
        T.eq(store['84d84b2199bf']['path'], 'test-1/bar.txt');
        T.eq(store['425b46fcc178']['path'], 'test-1/baz.txt');
        T.eq(store['7a803a2b46f6']['path'], 'test-1/foo.txt');
        T.eq(store['84d84b2199bf']['checksum'], '6690442d583d');
        T.eq(store['425b46fcc178']['checksum'], '5e066f2c5453');
        T.eq(store['7a803a2b46f6']['checksum'], 'd6375ba60848');
        T.eq(store['84d84b2199bf']['status'], 'same');
        T.eq(store['425b46fcc178']['status'], 'same');
        T.eq(store['7a803a2b46f6']['status'], 'same');
        T.ok(FMN.DATE._looks_like_timestamp(store['84d84b2199bf']['timestamp']));
        T.ok(FMN.DATE._looks_like_timestamp(store['425b46fcc178']['timestamp']));
        T.ok(FMN.DATE._looks_like_timestamp(store['7a803a2b46f6']['timestamp']));
        return done();
      };
    })(this));
    return null;
  };

  this["memo itself gets checksummed"] = function(T, done) {

    /* when the memo file is included by one of the globs, the entry for the memo will keep updating, but
    no bad things happen.
     */
    step((function(_this) {
      return function*(resume) {
        var result, settings;
        settings = {
          ref: 'test-data/test-2',
          name: 'no checksum for this memo.json',
          globs: './*'
        };
        result = (yield FMN.create_memo(settings, resume));
        debug('22022', result);
        return done();
      };
    })(this));
    return null;
  };

  this["set and get to and from cache"] = function(T, done) {
    step((function(_this) {
      return function*(resume) {
        var entry, key, memo, settings, store;
        settings = {
          ref: 'test-data',
          name: 'cache-example.json',
          globs: '*.json'
        };
        memo = (yield FMN.create_memo(settings, resume));
        FMN.set(memo, 'bar', 42);
        key = FMN.checksum_from_text(memo, 'bar');
        store = memo.store;
        T.eq(Object.keys(store), [key]);
        entry = store[key];
        T.ok(CND.is_subset(Object.keys(entry), ['path', 'checksum', 'timestamp', 'status', 'value']));
        T.eq((Object.keys(entry)).length, 5);
        debug('90988', memo);
        debug('90988', entry);
        T.eq(FMN.get(memo, 'bar'), 42);
        return done();
      };
    })(this));
    return null;
  };

  this["warn about missing features"] = function(T, done) {
    warn("reference point for globs: memo location");
    warn("cache absolute paths; make sure memo is skipped when doing checksums");
    return done();
  };

  if (module.parent == null) {
    include = ["create memo object (1)", "create memo object (2)", "memo itself gets checksummed", "set and get to and from cache", "warn about missing features"];
    this._prune();
    this._main();
  }

}).call(this);

//# sourceMappingURL=tests.js.map
