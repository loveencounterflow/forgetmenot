// Generated by CoffeeScript 1.11.1
(function() {
  var CND, FMN, FS, PATH, badge, debug, echo, help, include, info, log, rpr, step, templates_home, test, test_data_home, urge, warn, whisper,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'FORGETMENOT/TESTS';

  log = CND.get_logger('plain', badge);

  debug = CND.get_logger('debug', badge);

  info = CND.get_logger('info', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  whisper = CND.get_logger('whisper', badge);

  echo = CND.echo.bind(CND);

  test = require('guy-test');

  PATH = require('path');

  FS = require('fs');

  step = require('coffeenode-suspend').step;

  test_data_home = PATH.resolve(__dirname, '../test-data');

  templates_home = PATH.resolve(test_data_home, 'templates');

  FMN = require('..');

  this._prune = function() {
    var name, ref, value;
    ref = this;
    for (name in ref) {
      value = ref[name];
      if (name.startsWith('_')) {
        continue;
      }
      if (indexOf.call(include, name) < 0) {
        delete this[name];
      }
    }
    return null;
  };

  this._procure_test_files = function() {
    var byte_count, file_count, filename, i, len, ref, source_path, target_path;
    file_count = 0;
    ref = FS.readdirSync(templates_home);
    for (i = 0, len = ref.length; i < len; i++) {
      filename = ref[i];
      file_count += +1;
      source_path = PATH.resolve(templates_home, filename);
      target_path = PATH.resolve(test_data_home, filename);
      byte_count = this._copy_file_sync(source_path, target_path);
    }
    return whisper("copied " + file_count + " files");
  };

  this._copy_file_sync = function(source_path, target_path) {
    var source;
    FS.writeFileSync(target_path, source = FS.readFileSync(source_path));
    return source.length;
  };

  this._looks_like_digest = function(x) {
    return (CND.isa_text(x)) && /^[0-9a-f]{12}$/.test(x);
  };

  this._require_file = function(path) {

    /* Inhibit caching: */
    delete require['cache'][path];
    return require(path);
  };

  this._main = function() {
    return test(this, {
      'timeout': 2500
    });
  };

  this["create memo object (1)"] = function(T, done) {
    return step((function(_this) {
      return function*(resume) {
        var i, len, matcher, probe, probes_and_matchers, ref, result;
        probes_and_matchers = [
          [
            {}, {
              "~isa": "FORGETMENOT/memo",
              "globs": [],
              "path": null,
              "files": {},
              "cache": {}
            }
          ], [
            {}, {
              "~isa": "FORGETMENOT/memo",
              "globs": [],
              "path": null,
              "files": {},
              "cache": {}
            }
          ], [
            {
              "ref": "test-data"
            }, {
              "~isa": "FORGETMENOT/memo",
              "globs": [],
              "path": "test-data/memo-1.json",
              "files": {},
              "cache": {}
            }
          ], [
            {
              "globs": "src/*"
            }, {
              "~isa": "FORGETMENOT/memo",
              "globs": ["src/*"],
              "path": null,
              "files": {},
              "cache": {}
            }
          ]
        ];
        for (i = 0, len = probes_and_matchers.length; i < len; i++) {
          ref = probes_and_matchers[i], probe = ref[0], matcher = ref[1];
          result = (yield FMN.create_memo(probe, resume));
          debug('22022', JSON.stringify([probe, result]));
          T.eq(result, matcher);
        }
        return done();
      };
    })(this));
  };

  this["create memo object (2)"] = function(T, done) {
    step((function(_this) {
      return function*(resume) {
        var files, result, settings;
        settings = {
          globs: 'src/*'
        };
        result = (yield FMN.create_memo(settings, resume));
        files = result.files;
        T.eq(files['c19a9d5b001f']['path'], 'src/main.coffee');
        T.eq(files['0e4cf94eac84']['path'], 'src/tests.coffee');
        T.ok(_this._looks_like_digest(files['c19a9d5b001f']['checksum']));
        T.ok(_this._looks_like_digest(files['0e4cf94eac84']['checksum']));
        T.ok(FMN.DATE._looks_like_timestamp(files['c19a9d5b001f']['timestamp']));
        T.ok(FMN.DATE._looks_like_timestamp(files['0e4cf94eac84']['timestamp']));
        return done();
      };
    })(this));
    return null;
  };

  this["create memo object with path"] = function(T, done) {
    step((function(_this) {
      return function*(resume) {
        var files, result, settings;
        settings = {
          globs: 'src/*',
          ref: 'test-data/example-1.json'
        };
        result = (yield FMN.create_memo(settings, resume));
        debug('90988', result);
        files = result.files;
        T.eq(files['c19a9d5b001f']['path'], 'src/main.coffee');
        T.eq(files['0e4cf94eac84']['path'], 'src/tests.coffee');
        T.ok(_this._looks_like_digest(files['c19a9d5b001f']['checksum']));
        T.ok(_this._looks_like_digest(files['0e4cf94eac84']['checksum']));
        T.ok(FMN.DATE._looks_like_timestamp(files['c19a9d5b001f']['timestamp']));
        T.ok(FMN.DATE._looks_like_timestamp(files['0e4cf94eac84']['timestamp']));
        return done();
      };
    })(this));
    return null;
  };

  this["set and get to and from cache"] = function(T, done) {
    step((function(_this) {
      return function*(resume) {
        var fmn, settings;
        settings = {
          ref: 'test-data',
          name: 'cache-example.json'
        };
        fmn = (yield FMN.create_memo(settings, resume));
        FMN.set(fmn, 'bar', 42);
        debug('90988', fmn);
        debug('22230', FMN.get(fmn, 'bar'));
        return done();
      };
    })(this));
    return null;
  };

  this["new memo with reference point"] = function(T, done) {
    var settings;
    settings = {
      ref: 'cwd'
    };
    settings = {
      ref: 'memo'
    };
    return done();
  };

  this["warn about missing features"] = function(T, done) {
    warn("reference point for globs: memo location");
    warn("cache absolute paths; make sure memo is skipped when doing checksums");
    return done();
  };

  if (module.parent == null) {
    include = ["create memo object (1)"];
    this._prune();
    this._main();
  }

}).call(this);

//# sourceMappingURL=tests.js.map
